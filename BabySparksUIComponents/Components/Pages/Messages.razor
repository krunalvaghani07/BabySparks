@page "/messages"
@using BabySparksSharedClassLibrary.Models
@inject NavigationManager NavigationManager
@inject HubConnection hubConnection
@inject IFirebaseDataAccess firebaseDataAccess
@inject AppState AppState

<div class="container">

    @if (isMessageBoxOpen)
    {
        <div class="col-md-12">
            <div class="chat-container">
                <div class="search-bar">
                    <span class="fa fa-bars" @onclick="OpenSidebarMenu"></span>
                </div>
                <div class="chat-header">
                    <h3 class="box-title">@chatName</h3>
                    <div class="box-tools pull-right">
                        <button type="button" @onclick="ToggleMessageBox" class="btn btn-box-tool" data-widget="remove"><i class="fa fa-times"></i></button>
                    </div>
                </div>
                <div class="chat-body">
                    <div class="direct-chat-messages">
                        @if (messages != null && messages.Any())
                        {
                            @foreach (var msg in messages)
                            {
                                <div class="direct-chat-msg @(msg.FromId == AppState.user.Id ? "right" : "")">
                                    <div class="direct-chat-info clearfix">
                                        <span class="direct-chat-name @(msg.FromId == AppState.user.Id ? "pull-right" : "pull-left")">@msg.FromName</span>
                                        <span class="direct-chat-timestamp @(msg.FromId == AppState.user.Id ? "pull-left" : "pull-right")">@msg.Timestamp.ToString("dd MMM h:mm tt")</span>
                                    </div>
                                
                                    <div class="direct-chat-text">
                                        @msg.Content
                                    </div>
                                </div>
                            }
                        }
                        else
                        {
                            <p>No messages found.</p>
                        }
                    </div>
                </div>
                <div class="chat-footer">
                    <form @onsubmit="SendMessage">
                        <div class="input-group">
                            <input type="text" name="message" placeholder="Type Message ..." @bind-value="message" class="form-control">
                            <span class="input-group-btn">
                                <button type="submit" class="btn btn-primary btn-flat">Send</button>
                            </span>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="search-bar">
            <span class="fa fa-bars" @onclick="OpenSidebarMenu"></span>
        </div>
        <div class="top-rated">
            <div class="profile-list-item" @onclick="ToggleMessageBox">
                <img src="/_content/BabySparksUIComponents/images/daycare_default.jpg" alt="Profile Picture" class="profile-list-image" />
                <div class="profile-list-info">
                    <h3>Building Blocks daycare</h3><span><i class="fa fa-map-marker"></i> Kitchener</span>
                </div>
            </div>
        </div>
    }
</div>

@if (isSidebarOpen)
{
    <BabySparksUIComponents.SubComponent.Sidebar OnClose="CloseSidebar"></BabySparksUIComponents.SubComponent.Sidebar>
}

@code {
    bool isSidebarOpen = false;
    bool isMessageBoxOpen = false;
    string chatName;
    User selectedUser;
    string message;
    List<Message> messages;

    protected override async Task OnInitializedAsync()
    {
        var uri = new Uri(NavigationManager.Uri);
        var queryParams = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);

        if (queryParams.TryGetValue("chat", out var chat))
        {
            selectedUser = await firebaseDataAccess.GetUser(chat);

            if (selectedUser.userType == BabySparksSharedClassLibrary.Enums.UserType.Nanny || selectedUser.userType == BabySparksSharedClassLibrary.Enums.UserType.Parent)
            {
                chatName = selectedUser.FirstName;
            }
            else
            {
                DayCare dayCare = selectedUser as DayCare;
                if (dayCare != null)
                {
                    chatName = dayCare.DayCareName;
                }
            }

            // Fetch messages for the selected user or chat room
            //messages = await firebaseDataAccess.GetMessages(selectedUser.Id);

            isMessageBoxOpen = true;
        }
    }

    async Task SendMessage()
    {
        try
        {
            if (!string.IsNullOrWhiteSpace(message))
            {
                // Send message via SignalR
                await hubConnection.InvokeAsync("SendMessage", selectedUser.Id, AppState.user.Id, message);

                // Add sent message to UI immediately (optimistic UI update)
                messages.Add(new Message
                    {
                        FromId = AppState.user.Id,
                        FromName = AppState.user.FirstName,
                        Content = message,
                        Timestamp = DateTime.UtcNow
                    });

                message = ""; // Clear message input after sending
            }
        }
        catch (Exception ex)
        {
            // Handle send message error
        }
    }

    async Task OpenSidebarMenu()
    {
        isSidebarOpen = true;
    }

    async Task CloseSidebar()
    {
        isSidebarOpen = false;
    }

    async Task ToggleMessageBox()
    {
        message = "";
        isMessageBoxOpen = !isMessageBoxOpen;
    }
}
